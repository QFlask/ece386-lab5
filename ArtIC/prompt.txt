I want you to complete some Python code for me. the ultimate goal of this script is to view art exhibitions from the Art Institute of Chicago using the Art Institute of Chicago API.
I want the Python script to do the following things:
- Accept a search term from the user
- Search the Art Institute of Chicago API for exhibitions marching this search term **and** that have artwork titles using a **GET** request
- Display the titles of the artwork for those exhibitions to the user
- Loop until the user exits

##Here is the background information for the API:
For example, you can access the /artworks listing endpoint in our API by visiting the following URL to see all the published artworks in our collection:

https://api.artic.edu/api/v1/artworks

If you want to search and filter the results, you can do so via our search endpoints. For example, here is a full-text search (opens new window)for all artworks whose metadata contains some mention of cats:

https://api.artic.edu/api/v1/artworks/search?q=cats

Here is the same search, but filtered to only show artworks that are in the public domain:

https://api.artic.edu/api/v1/artworks/search?q=cats&query[term][is_public_domain]=true

Our API accepts queries through both GET and POST. It might be easier to visualize how the GET query above is structured by comparing it to its POST equivallent:

curl --location --request POST 'https://api.artic.edu/api/v1/artworks/search' \
--header 'Content-Type: application/json' \
--data-raw '{
    "q": "cats",
    "query": {
        "term": {
            "is_public_domain": true
        }
    }
}'
For production use, we recommend using GET and passing the entire query as minified URL-encoded JSON via the params parameter. For example:

https://api.artic.edu/api/v1/artworks/search?params=%7B%22q

##Here is background information for getting exhibitions from the API

GET /exhibitions
A list of all exhibitions sorted by last updated date in descending order. For a description of all the fields included with this response, see here.

#Available parameters:
ids - A comma-separated list of resource ids to retrieve
limit - The number of resources to return per page
page - The page of resources to retrieve
fields - A comma-separated list of fields to return per resource
include - A comma-separated list of subresource to embed in the returned resources. Available options are:
artworks
sites
Example request: https://api.artic.edu/api/v1/exhibitions?limit=2

###Python template

use `import requests` for making the HTTPS GET request

```Python
def search_exhibitions(term: str) -> list[int]:
    '''Make a request to exhibitions/search for the search term,
    using Elasticsearch `exists` option to only return results where the `artwork_titles` field is not empty
    Process the result and return a list of exhibitions IDs.
    '''

def main():
	#TODO: create a continuous loop


```

